["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Window",["^ ","~$prototype",["^ ","~$getComputedStyle",["^ "]]],"~$Object",["^ ","~$getPropertyValue",["^ "]],"~$Image",["^ ","^4",["^ ","~$src",["^ "]]]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$lemon.lime.css","~:imports",null,"~:requires",["^ ","~$lemon.lime.impl","^A","~$goog.dom","^B","~$impl","^A","~$ll.spec","~$lemon.lime.spec","~$gstyle","~$goog.style","~$gevent","~$goog.events","~$lemon.lime.protocols","^J","~$gdom","^B","~$s","~$cljs.spec.alpha","~$string","~$clojure.string","^G","^G","^N","^N","^L","^L","^I","^I","^E","^E"],"~:cljs.spec/speced-vars",["~$lemon.lime.css/element"],"~:uses",["^ ","~$Renderer","^J","~$EventType","^I"],"~:defs",["^ ","~$update-position",["^ ","~:no-doc",true,"~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","~:line",77,"~:column",16,"~:end-line",77,"~:end-column",31,"^V",true,"~:arglists",["~#list",["~$quote",["^13",[["~$state","~$element"]]]]],"~:doc","Update the css background properties of the sprite element"],"^=","~$lemon.lime.css/update-position","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^11",31,"~:method-params",["^13",[["^15","^16"]]],"~:protocol-impl",null,"~:arglists-meta",["^13",[null,null]],"^[",1,"~:variadic?",false,"^Z",77,"^10",77,"~:max-fixed-arity",2,"~:fn-var",true,"^12",["^13",["^14",["^13",[["^15","^16"]]]]],"^17","Update the css background properties of the sprite element"],"~$guarantee-background",["^ ","^V",true,"^W",null,"^X",["^ ","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^Z",100,"^[",16,"^10",100,"^11",36,"^V",true,"^12",["^13",["^14",["^13",[[["^ ","~:keys",["~$uri"],"~:as","^15"],"^16"]]]]],"^17","If the element already has the given uri as a background image, then dont update\n   the background-image style. This can prevent a flicker caused by setting the background-image\n   style via cljs (even when they are technically the same value)"],"^=","~$lemon.lime.css/guarantee-background","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^11",36,"^19",["^13",[["~$p__606","^16"]]],"^1:",null,"^1;",["^13",[null,null]],"^[",1,"^1<",false,"^Z",100,"~:ret-tag",["^<",[null,"~$any"]],"^10",100,"^1=",2,"^1>",true,"^12",["^13",["^14",["^13",[[["^ ","^1@",["^1A"],"^1B","^15"],"^16"]]]]],"^17","If the element already has the given uri as a background image, then dont update\n   the background-image style. This can prevent a flicker caused by setting the background-image\n   style via cljs (even when they are technically the same value)"],"~$draw",["^ ","^V",true,"^W",null,"^X",["^ ","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^Z",83,"^[",16,"^10",83,"^11",20,"^V",true,"^12",["^13",["^14",["^13",[["^15","^16"]]]]],"^17","Update the sprite's CSS background with current state"],"^=","~$lemon.lime.css/draw","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^11",20,"^19",["^13",[["^15","^16"]]],"^1:",null,"^1;",["^13",[null,null]],"^[",1,"^1<",false,"^Z",83,"^1E",["^<",["~$clj","^1F"]],"^10",83,"^1=",2,"^1>",true,"^12",["^13",["^14",["^13",[["^15","^16"]]]]],"^17","Update the sprite's CSS background with current state"],"~$create-state",["^ ","^V",true,"^W",null,"^X",["^ ","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^Z",111,"^[",16,"^10",111,"^11",28,"^V",true,"^12",["^13",["^14",["^13",[["~$image","~$sprite"]]]]],"^17","Create the sprite element and draw it's initial state. Returns new\n   sprite state that includes the element and sprite sheet dimensions"],"^=","~$lemon.lime.css/create-state","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^11",28,"^19",["^13",[["^1K","^1L"]]],"^1:",null,"^1;",["^13",[null,null]],"^[",1,"^1<",false,"^Z",111,"^1E",["^<",["^1I","^1F"]],"^10",111,"^1=",2,"^1>",true,"^12",["^13",["^14",["^13",[["^1K","^1L"]]]]],"^17","Create the sprite element and draw it's initial state. Returns new\n   sprite state that includes the element and sprite sheet dimensions"],"~$create-frames",["^ ","^V",true,"^W",null,"^X",["^ ","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^Z",90,"^[",16,"^10",90,"^11",29,"^V",true,"^12",["^13",["^14",["^13",[[["^ ","^1@",["~$sprite-sheet"],"^1B","^15"]]]]]],"^17","The available set of frames is a function of the loaded sprite-sheet. The renderer\n   implementation is responsible for setting the initial frame state. So it is written. So\n   it shall be."],"^=","~$lemon.lime.css/create-frames","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^11",29,"^19",["^13",[["~$p__604"]]],"^1:",null,"^1;",["^13",[null,null]],"^[",1,"^1<",false,"^Z",90,"^1E",["^<",["^1I","^1F"]],"^10",90,"^1=",1,"^1>",true,"^12",["^13",["^14",["^13",[[["^ ","^1@",["^1O"],"^1B","^15"]]]]]],"^17","The available set of frames is a function of the loaded sprite-sheet. The renderer\n   implementation is responsible for setting the initial frame state. So it is written. So\n   it shall be."],"~$load-image",["^ ","^V",true,"^W",null,"^X",["^ ","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^Z",60,"^[",16,"^10",60,"^11",26,"^V",true,"^12",["^13",["^14",["^13",[["^1A","~$fn-1"]]]]],"^17","Load the sprite image by uri. Calls fn-1 with the laoded image or throws an error if the image fails\n   to load"],"^=","~$lemon.lime.css/load-image","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^11",26,"^19",["^13",[["^1A","^1S"]]],"^1:",null,"^1;",["^13",[null,null]],"^[",1,"^1<",false,"^Z",60,"^10",60,"^1=",2,"^1>",true,"^12",["^13",["^14",["^13",[["^1A","^1S"]]]]],"^17","Load the sprite image by uri. Calls fn-1 with the laoded image or throws an error if the image fails\n   to load"],"~$->CssRenderer",["^ ","^V",true,"^W",null,"^X",["^ ","^V",true,"~:protocols",["^<",["~$lemon.lime.protocols/Renderer"]],"^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^11",30,"^[",19,"~:factory","~:positional","^Z",132,"^10",132,"^12",["^13",["^14",["^13",[["~$transition-load","~$transition-render"]]]]],"~:skip-protocol-flag",null,"^17","Positional factory function for lemon.lime.css/CssRenderer."],"^1V",["^<",["^1W"]],"^=","~$lemon.lime.css/->CssRenderer","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^11",30,"^19",["^13",[["^1Z","^1["]]],"^1:",null,"^1;",["^13",[null,null]],"^[",1,"^1<",false,"^1X","^1Y","^Z",132,"^1E","~$lemon.lime.css/CssRenderer","^10",132,"^1=",2,"^1>",true,"^12",["^13",["^14",["^13",[["^1Z","^1["]]]]],"^20",null,"^17","Positional factory function for lemon.lime.css/CssRenderer."],"^16",["^ ","^W",null,"^X",["^ ","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^Z",160,"^[",7,"^10",160,"^11",14,"^12",["^13",["^14",["^13",[["^1L"]]]]],"^17","Sprites rendered by a css renderer contain a reference to their dom element.\n   This function returns that element when available"],"^=","^P","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^11",14,"^19",["^13",[["^1L"]]],"^1:",null,"^1;",["^13",[null,null]],"^[",1,"^1<",false,"^Z",160,"^1E",["^<",["^1F","~$clj-nil"]],"^10",160,"^1=",1,"^1>",true,"^12",["^13",["^14",["^13",[["^1L"]]]]],"^17","Sprites rendered by a css renderer contain a reference to their dom element.\n   This function returns that element when available"],"~$replace-element",["^ ","^V",true,"^W",null,"^X",["^ ","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^Z",124,"^[",16,"^10",124,"^11",31,"^V",true,"^12",["^13",["^14",["^13",[["^16","~$target","~$_"]]]]],"^17","The default append function. Is used to replace a configured sprite\n   element that already exists on the page."],"^=","~$lemon.lime.css/replace-element","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^11",31,"^19",["^13",[["^16","^25","~$_"]]],"^1:",null,"^1;",["^13",[null,null]],"^[",1,"^1<",false,"^Z",124,"^1E","^23","^10",124,"^1=",3,"^1>",true,"^12",["^13",["^14",["^13",[["^16","^25","~$_"]]]]],"^17","The default append function. Is used to replace a configured sprite\n   element that already exists on the page."],"~$update-dimensions",["^ ","^V",true,"^W",null,"^X",["^ ","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^Z",69,"^[",16,"^10",69,"^11",33,"^V",true,"^12",["^13",["^14",["^13",[[["^ ","^1@",["~$width","~$height"],"^1B","^15"],"^16"]]]]],"^17","Set the dimensions of the element to match the sprite's state"],"^=","~$lemon.lime.css/update-dimensions","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^11",33,"^19",["^13",[["~$p__602","^16"]]],"^1:",null,"^1;",["^13",[null,null]],"^[",1,"^1<",false,"^Z",69,"^1E",["^<",[null,"^1F"]],"^10",69,"^1=",2,"^1>",true,"^12",["^13",["^14",["^13",[[["^ ","^1@",["^28","^29"],"^1B","^15"],"^16"]]]]],"^17","Set the dimensions of the element to match the sprite's state"],"~$CssRenderer",["^ ","^V",true,"~:num-fields",2,"^1V",["^<",["^1W"]],"^=","^22","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^11",30,"~:type",true,"^[",19,"^Z",132,"~:record",false,"^10",132,"~:tag","~$function","^20",null],"~$px",["^ ","^V",true,"^W",null,"^X",["^ ","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^Z",32,"^[",16,"^10",32,"^11",18,"^V",true,"^12",["^13",["^14",["^13",[["~$x"]]]]],"^17","Convert x to a valid css pixel value. Returns a space joined string of pixel\n   values if x is seqable"],"^=","~$lemon.lime.css/px","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^11",18,"^19",["^13",[["~$x"]]],"^1:",null,"^1;",["^13",[null,null]],"^[",1,"^1<",false,"^Z",32,"^1E","^M","^10",32,"^1=",1,"^1>",true,"^12",["^13",["^14",["^13",[["~$x"]]]]],"^17","Convert x to a valid css pixel value. Returns a space joined string of pixel\n   values if x is seqable"],"~$pos",["^ ","^V",true,"^W",null,"^X",["^ ","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^Z",41,"^[",16,"^10",41,"^11",19,"^V",true,"^12",["^13",["^14",["^13",[[["^ ","^1@",["^28","^29","~$frame"]]]]]]],"^17","Returns a valid CSS background position from the given sprite state"],"^=","~$lemon.lime.css/pos","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^11",19,"^19",["^13",[["~$p__597"]]],"^1:",null,"^1;",["^13",[null,null]],"^[",1,"^1<",false,"^Z",41,"^1E","^M","^10",41,"^1=",1,"^1>",true,"^12",["^13",["^14",["^13",[[["^ ","^1@",["^28","^29","^2E"]]]]]]],"^17","Returns a valid CSS background position from the given sprite state"],"~$create-renderer",["^ ","^W",null,"^X",["^ ","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^Z",155,"^[",7,"^10",155,"^11",22,"^12",["^13",["^14",["^13",[["^1Z","^1["]]]]],"^17","Create a css renderer"],"^=","~$lemon.lime.css/create-renderer","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^11",22,"^19",["^13",[["^1Z","^1["]]],"^1:",null,"^1;",["^13",[null,null]],"^[",1,"^1<",false,"^Z",155,"^1E","^22","^10",155,"^1=",2,"^1>",true,"^12",["^13",["^14",["^13",[["^1Z","^1["]]]]],"^17","Create a css renderer"],"~$get-background-image",["^ ","^V",true,"^W",null,"^X",["^ ","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^Z",50,"^[",16,"^10",50,"^11",36,"^V",true,"^12",["^13",["^14",["^13",[["^16"]]]]],"^17","Get the computed background-image for an element. Useful for checking if the sprite element already\n   has a background-image"],"^=","~$lemon.lime.css/get-background-image","^Y","/Users/brian/projects/lemon-lime/src/lemon/lime/css.cljs","^11",36,"^19",["^13",[["^16"]]],"^1:",null,"^1;",["^13",[null,null]],"^[",1,"^1<",false,"^Z",50,"^1E",["^<",["~$js","^23"]],"^10",50,"^1=",1,"^1>",true,"^12",["^13",["^14",["^13",[["^16"]]]]],"^17","Get the computed background-image for an element. Useful for checking if the sprite element already\n   has a background-image"]],"~:cljs.spec/registry-ref",[["~:lemon.lime.css/element",["^13",["~$cljs.core/fn",["~$%"],["^13",["~$cljs.core/instance?","~$js/HTMLElement","~$%"]]]]],["^P",["^13",["~$cljs.spec.alpha/fspec","~:args",["^13",["~$cljs.spec.alpha/cat","~:sprite","~:lemon.lime.spec/sprite"]],"~:ret",["^13",["~$cljs.spec.alpha/nilable","^2N"]]]]],["~:lemon.lime.css/id","~$cljs.core/string?"],["~:lemon.lime.css/renderer",["^13",["~$cljs.spec.alpha/keys","~:req-un",["^2Y"],"~:opt-un",["~:lemon.lime.css/append"]]]],["^33",["^13",["^2R","^2S",["^13",["^2T","~:element","^2N","~:target",["^13",["^2X","^2N"]],"~:id","^2Y"]],"^2W","~$cljs.core/any?"]]]],"~:require-macros",["^ ","~$s","^L","^L","^L"],"~:cljs.analyzer/constants",["^ ","~:seen",["^<",["^2S","^31","^32","^2W","~:gfn","^2N","~:pred-exprs","~:keys-pred","~:frame","~:opt-keys","^34","^2Q","^2V","^2T","~:frames","^2Z","~:req-specs","^P","~:append","~:width","^2R","^2X","~$cljs.core/contains?","~$cljs.core/map?","~$%","^1[","^2Y","^1Z","^2U","^30","~:req","^2[","^36","~:req-keys","^2O","~:opt-specs","~:pred-forms","^33","~:uri","^35","~:sprite-sheet","^37","^2P","~:height","~:opt"]],"~:order",["^2Y","^2Z","^2N","^2O","~$%","^2P","^2Q","^33","^2R","^2S","^2T","^34","^35","^2X","^36","^2W","^37","^2[","^30","^31","^32","^3;","^3<","^3=","^3?","^3A","^3F","^3G","^3H","^3I","^3M","^3B","^3E","^3D","^3C","^3L","^3>","^3K","^3@","^3J","^1Z","^1[","^P","^2U","^2V"]],"^17","This provides a default renderer implementation based on CSS background positions. Most\n   renderers should leverage lemon.lime instead of lemon.lime.impl. This renderer leverages impl\n   so it can be provided as a default renderer when creating a sprite via lemon.lime. It is a design\n   goal of this library to support state transition keys exclusively via the lemon.lime namespace, hence\n   the CssRenderer type accepting transition-x style functions at creation time.\n   \n   The css renderer supports configuration via a lemon.lime.css/renderer key. This configuration map\n   accepts an :id field indicating a dom id to be replaced. An :append field may be provided to control\n   how the sprite is added to the dom. The :append key must be a function of 3 arguments. It will receive\n   the sprite element, a target identified by :id if available, and the given :id."]